name: docker-compose-ci

on:
  workflow_dispatch:
  push:
    branches: ["**"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: docker-compose-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REPO_SLUG: centralized-logging
  DOCKERHUB_NAMESPACE: ""        # set to mirror to Docker Hub or leave empty
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  images:
    name: Build and Push Images (GHCR)
    runs-on: ubuntu-latest
    # Push images only on master, tags, or manual dispatch (PRs still build if you press Run)
    if: >
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.ref, 'refs/heads/master') ||
      startsWith(github.ref, 'refs/tags/v')
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build a single-line, comma-separated tag list per service
      - name: Compute tags
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"               # force lowercase for GHCR
          REPO_SLUG="${REPO_SLUG}"

          # Always push :edge
          user_tags="ghcr.io/${OWNER_LC}/${REPO_SLUG}/userapi:edge"
          api_tags="ghcr.io/${OWNER_LC}/${REPO_SLUG}/api:edge"
          web_tags="ghcr.io/${OWNER_LC}/${REPO_SLUG}/web:edge"

          REF="${GITHUB_REF}"

          # On master, also push :latest
          if [[ "$REF" == "refs/heads/master" ]]; then
            user_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/userapi:latest"
            api_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/api:latest"
            web_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/web:latest"
          fi

          # On tag vX.Y.Z, also push :vX.Y.Z and :X.Y
          if [[ "$REF" == refs/tags/v* ]]; then
            ver="${REF#refs/tags/}"            # vX.Y.Z
            short="${ver#v}"                   # X.Y.Z
            minor="${short%.*}"                # X.Y
            user_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/userapi:${ver},ghcr.io/${OWNER_LC}/${REPO_SLUG}/userapi:${minor}"
            api_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/api:${ver},ghcr.io/${OWNER_LC}/${REPO_SLUG}/api:${minor}"
            web_tags+=",ghcr.io/${OWNER_LC}/${REPO_SLUG}/web:${ver},ghcr.io/${OWNER_LC}/${REPO_SLUG}/web:${minor}"
          fi

          echo "user_tags=$user_tags" >> "$GITHUB_OUTPUT"
          echo "api_tags=$api_tags"   >> "$GITHUB_OUTPUT"
          echo "web_tags=$web_tags"   >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: (Optional) Login to Docker Hub
        if: ${{ env.DOCKERHUB_NAMESPACE != '' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Bake and Push (multi-arch)
        uses: docker/bake-action@v5
        with:
          files: ./docker-bake.hcl
          push: true
          variables: |
            OWNER=${{ github.repository_owner }}
            REPO_SLUG=${{ env.REPO_SLUG }}
          set: |
            *.platform=${{ env.PLATFORMS }}
            *.cache-from=type=local,src=/tmp/.buildx-cache
            *.cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max
            *.labels.org.opencontainers.image.revision=${{ github.sha }}
            userapi.tags=${{ steps.tags.outputs.user_tags }}
            api.tags=${{ steps.tags.outputs.api_tags }}
            web.tags=${{ steps.tags.outputs.web_tags }}

      - name: Save build cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Mirror to Docker Hub (optional)
        if: ${{ env.DOCKERHUB_NAMESPACE != '' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          set -euo pipefail
          mirror() { local svc="$1"; local list="$2"; IFS=',' read -ra arr <<< "$list"; \
            for img in "${arr[@]}"; do
              tag="${img##*:}"
              hub="${DOCKERHUB_NAMESPACE}/${REPO_SLUG}-${svc}:${tag}"
              echo "Mirroring $img -> $hub"
              docker pull "$img"
              docker tag  "$img" "$hub"
              docker push "$hub"
            done
          }
          mirror userapi "${{ steps.tags.outputs.user_tags }}"
          mirror api     "${{ steps.tags.outputs.api_tags }}"
          mirror web     "${{ steps.tags.outputs.web_tags }}"
